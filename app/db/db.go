// Code generated by sqlc. DO NOT EDIT.

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.addNewPostStmt, err = db.PrepareContext(ctx, addNewPost); err != nil {
		return nil, fmt.Errorf("error preparing query AddNewPost: %w", err)
	}
	if q.addNewUserStmt, err = db.PrepareContext(ctx, addNewUser); err != nil {
		return nil, fmt.Errorf("error preparing query AddNewUser: %w", err)
	}
	if q.getOnePostStmt, err = db.PrepareContext(ctx, getOnePost); err != nil {
		return nil, fmt.Errorf("error preparing query GetOnePost: %w", err)
	}
	if q.getOneUSerStmt, err = db.PrepareContext(ctx, getOneUSer); err != nil {
		return nil, fmt.Errorf("error preparing query GetOneUSer: %w", err)
	}
	if q.listPostsStmt, err = db.PrepareContext(ctx, listPosts); err != nil {
		return nil, fmt.Errorf("error preparing query ListPosts: %w", err)
	}
	if q.listUsersStmt, err = db.PrepareContext(ctx, listUsers); err != nil {
		return nil, fmt.Errorf("error preparing query ListUsers: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.addNewPostStmt != nil {
		if cerr := q.addNewPostStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addNewPostStmt: %w", cerr)
		}
	}
	if q.addNewUserStmt != nil {
		if cerr := q.addNewUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addNewUserStmt: %w", cerr)
		}
	}
	if q.getOnePostStmt != nil {
		if cerr := q.getOnePostStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getOnePostStmt: %w", cerr)
		}
	}
	if q.getOneUSerStmt != nil {
		if cerr := q.getOneUSerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getOneUSerStmt: %w", cerr)
		}
	}
	if q.listPostsStmt != nil {
		if cerr := q.listPostsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listPostsStmt: %w", cerr)
		}
	}
	if q.listUsersStmt != nil {
		if cerr := q.listUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listUsersStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db             DBTX
	tx             *sql.Tx
	addNewPostStmt *sql.Stmt
	addNewUserStmt *sql.Stmt
	getOnePostStmt *sql.Stmt
	getOneUSerStmt *sql.Stmt
	listPostsStmt  *sql.Stmt
	listUsersStmt  *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:             tx,
		tx:             tx,
		addNewPostStmt: q.addNewPostStmt,
		addNewUserStmt: q.addNewUserStmt,
		getOnePostStmt: q.getOnePostStmt,
		getOneUSerStmt: q.getOneUSerStmt,
		listPostsStmt:  q.listPostsStmt,
		listUsersStmt:  q.listUsersStmt,
	}
}
