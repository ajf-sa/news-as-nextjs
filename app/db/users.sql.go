// Code generated by sqlc. DO NOT EDIT.
// source: users.sql

package db

import (
	"context"
)

const addNewUser = `-- name: AddNewUser :one
INSERT INTO users(username,password)VALUES($1,$2) RETURNING id, username, password, email, create_at
`

type AddNewUserParams struct {
	Username string
	Password string
}

func (q *Queries) AddNewUser(ctx context.Context, arg AddNewUserParams) (User, error) {
	row := q.queryRow(ctx, q.addNewUserStmt, addNewUser, arg.Username, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.CreateAt,
	)
	return i, err
}

const getOneUSer = `-- name: GetOneUSer :one
SELECT id, username, password, email, create_at FROM users WHERE username=$1 LIMIT 1 OFFSET 0
`

func (q *Queries) GetOneUSer(ctx context.Context, username string) (User, error) {
	row := q.queryRow(ctx, q.getOneUSerStmt, getOneUSer, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.CreateAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, username, password, email, create_at FROM users LIMIT $1 OFFSET $2
`

type ListUsersParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.query(ctx, q.listUsersStmt, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Password,
			&i.Email,
			&i.CreateAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
