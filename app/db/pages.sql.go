// Code generated by sqlc. DO NOT EDIT.
// source: pages.sql

package db

import (
	"context"
)

const addNewPage = `-- name: AddNewPage :exec
INSERT INTO pages(title,descr,parent_id)values($1,$2,$3)
`

type AddNewPageParams struct {
	Title    string
	Descr    string
	ParentID int32
}

func (q *Queries) AddNewPage(ctx context.Context, arg AddNewPageParams) error {
	_, err := q.exec(ctx, q.addNewPageStmt, addNewPage, arg.Title, arg.Descr, arg.ParentID)
	return err
}

const disablePage = `-- name: DisablePage :exec
UPDATE pages SET is_active=false
`

func (q *Queries) DisablePage(ctx context.Context) error {
	_, err := q.exec(ctx, q.disablePageStmt, disablePage)
	return err
}

const enablePage = `-- name: EnablePage :exec
UPDATE pages SET is_active=true
`

func (q *Queries) EnablePage(ctx context.Context) error {
	_, err := q.exec(ctx, q.enablePageStmt, enablePage)
	return err
}

const listPages = `-- name: ListPages :many
SELECT id, title, descr, parent_id, create_at, is_active FROM pages
`

func (q *Queries) ListPages(ctx context.Context) ([]Page, error) {
	rows, err := q.query(ctx, q.listPagesStmt, listPages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Page
	for rows.Next() {
		var i Page
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Descr,
			&i.ParentID,
			&i.CreateAt,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
